name: CI Pipeline

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  build:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Pre-fetch dependencies
        run: mvn dependency:go-offline

      - name: Build project
        run: mvn clean install -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            ChargeUnity/backend/target/classes
            ChargeUnity/backend/target/*.jar

  test:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run tests and generate coverage
        run: mvn test jacoco:report -T 4 -Dtest='*UnitTest,*IT,*ControllerTest'

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: ChargeUnity/backend/target/site/jacoco/

  sonar:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ChargeUnity/backend/target/

      - name: Download JaCoCo report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: ChargeUnity/backend/target/site/jacoco/

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=ChargeUnity_TQS_ChargeUnity \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  
  integration-test:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ChargeUnity/backend/target/

      - name: Run integration tests
        run: ./mvnw test -Dtest=*IT

  functional-test:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ChargeUnity/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4 
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Write .env file
        # Place the .env file in the same directory as `docker-compose.yml`
        working-directory: ./ChargeUnity
        run: |
          cat <<EOF > .env
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          APP_PORT=${{ secrets.APP_PORT }}
          DB_EMAIL=${{ secrets.DB_EMAIL }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          VITE_APP_API_URL=${{ secrets.VITE_APP_API_URL }}
          FRONTEND_PORT_VITE=${{ secrets.FRONTEND_PORT_VITE }}
          GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}
          GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          EOF

      - name: Write test application.properties
        run: |
          mkdir -p ./ChargeUnity/backend/src/test/resources
          cat <<EOF > ./ChargeUnity/backend/src/test/resources/application.properties
          spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.sql.init.mode=never
          spring.flyway.enabled=true
          spring.flyway.locations=classpath:db/migration
          spring.flyway.clean-disabled=false
          spring.flyway.baseline-on-migrate=true
          spring.flyway.check-location=false
          spring.jpa.hibernate.ddl-auto=none
          spring.jpa.defer-datasource-initialization=false
          spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration+
          spring.security.enabled=false
          EOF

      - name: Install Firefox and GeckoDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox wget unzip jq
          
          GECKO_URL=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.assets[] | select(.name | test("linux64\\.tar\\.gz$")) | .browser_download_url')
          wget "$GECKO_URL" -O geckodriver.tar.gz
          tar -xzf geckodriver.tar.gz
          sudo mv geckodriver /usr/bin/geckodriver
          sudo chmod +x /usr/bin/geckodriver

      - name: Build backend
        run: mvn clean package -DskipTests

      - name: Start containers
        # Run Docker Compose in the root directory where `docker-compose.yml` and `.env` are located
        working-directory: ./ChargeUnity
        run: ls && docker compose --env-file .env -f docker-compose.yml up -d --build

      - name: Wait for frontend to be healthy
        # Use curl to check if the frontend is up and responding
        run: |
          echo "Waiting for frontend to respond..."
          for i in {1..30}; do
            if curl -sSf http://localhost:5173 > /dev/null; then
              echo "Frontend is up."
              break
            fi
            echo "Waiting..."
            sleep 2
          done

      - name: Run functional tests (Firefox)
        working-directory: ChargeUnity/backend
        run: |
          docker ps &&
          mvn test -Pfunctional-tests -Dskip.xray.unit=true -Dskip.xray.cucumber=false \
            -Dxray.clientId=${{ secrets.XRAY_CLIENT_ID }} \
            -Dxray.clientSecret=${{ secrets.XRAY_CLIENT_SECRET }}

      - name: Stop containers
        # Stop Docker Compose containers in the root directory
        working-directory: ./ChargeUnity
        run: docker compose --env-file .env -f docker-compose.yml down

  xray-integration:
    if: |
      !(github.event.pull_request.draft == true &&
        contains(join(github.event.pull_request.labels.*.name, ','), 'ci:skip'))
    name: Xray Integration
    runs-on: ubuntu-latest
    needs: 
      - test
      - integration-test
      - functional-test
      - sonar
    defaults:
      run:
        working-directory: ChargeUnity/backend
      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Debug and Test Xray Connection
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        run: |
          echo "Testing Xray authentication..."
            
          # Test authentication with curl
          response=$(curl -s -w "\n%{http_code}" -H "Content-Type: application/json" \
            -X POST \
            --data "{\"client_id\":\"${XRAY_CLIENT_ID}\",\"client_secret\":\"${XRAY_CLIENT_SECRET}\"}" \
            https://xray.cloud.getxray.app/api/v2/authenticate)
            
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
            
          if [ "$http_code" -ne 200 ]; then
            echo "Authentication failed with HTTP code: $http_code"
            echo "Response body: $body"
            exit 1
          else
            echo "Authentication successful! "
          fi

      - name: Run tests and upload to Xray
        run: |
          mvn clean test -Pxray-unit -Dtest='*UnitTest,*IT,*ControllerTest' \
            -Dxray.clientId='${{ secrets.XRAY_CLIENT_ID }}' \
            -Dxray.clientSecret='${{ secrets.XRAY_CLIENT_SECRET }}'